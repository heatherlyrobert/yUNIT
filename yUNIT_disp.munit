#include    "master.munit"



char
UNIT___disp_top         (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_disp"    , "(DISP) verify formatting of top line");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond  ("verify quick success (CONSOLE)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  aa) PASS   : sample step .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check header"                   , yENV_upeek  (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify quick success (ETERM)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_GRN "aa) " BACK_GRN "PASS  " BACK_OFF " : sample step  ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check header"                   , yENV_upeek  (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify quick success (STEP)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_STEP, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  aa) PASS   : sample step .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check header"                   , yENV_upeek  (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify quick success (COND)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_COND, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  aa) PASS   : sample step .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    0);
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '['), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify quick success (SCRP)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_SCRP, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  aa) PASS   : sample step .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    0);
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '['), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify failure (CONSOLE)");              
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FAIL, -15)                 ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  aa) FAIL   : sample step .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify failure (ETERM)");              
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FAIL, -15)                 ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_RED "aa) " BACK_RED "FAIL  " BACK_OFF " : sample step  ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify forced failure (CONSOLE)");              
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FFAIL,  15)                ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  aa) !FAIL  : sample step .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify forced failure (ETERM)");              
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FFAIL,  15)                ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_GRN "aa) " BACK_RED "!FAIL " BACK_OFF " : sample step  ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify forced success (CONSOLE)");              
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FSUCC,  15)                ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  aa) !PASS  : sample step .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify forced success (ETERM)");              
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FSUCC,  15)                ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_RED "aa) " BACK_GRN "!PASS " BACK_OFF " : sample step  ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify warning (CONSOLE)");              
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_WARN ,  15)                ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  aa) WARN   : sample step .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify warning (ETERM)");              
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_WARN ,  15)                ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_YEL "aa) " BACK_YEL "WARN  " BACK_OFF " : sample step  ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify void (CONSOLE)");              
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_VOID ,   0)                ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  aa) ----   : sample step .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify void (ETERM)");              
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_VOID ,   0)                ,    0);
   yUNIT_minval   ("call top line"                      , yunit_disp__top  (TYPE_STEP  ,   954,   1, "sample step"      ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_CYN "aa) " BACK_CYN "----  " BACK_OFF " : sample step  ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_minprcs  ();
   return 0;
}

char
UNIT___disp_mid         (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_disp"    , "(DISP) verify formatting mid output");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond  ("verify quick success (CONSOLE)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__mid  ("critical_function"      , "15, 27, \"text\""                  , "s_equal"  ),   1);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "      method : critical_function (15, 27, \"text\")");
   yUNIT_minstr   ("... check header"                   , yENV_upeek  (myUNIT.name, '>'), "      test   : s_equal    (rc =    0, test abbr = -)");
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify quick success (ETERM)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__mid  ("critical_function"      , "15, 27, \"text\""                  , "s_equal"  ),   1);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "      method : critical_function (15, 27, \"text\")");
   yUNIT_minstr   ("... check header"                   , yENV_upeek  (myUNIT.name, '>'), "      test   : s_equal    (rc =    0, test abbr = -)");
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify will not act on STEP");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_STEP, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__mid  ("critical_function"      , "15, 27, \"text\""                  , "s_equal"  ),   0);
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify will not act on COND");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_COND, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__mid  ("critical_function"      , "15, 27, \"text\""                  , "s_equal"  ),   0);
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify will not act on SCRP");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_SCRP, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__mid  ("critical_function"      , "15, 27, \"text\""                  , "s_equal"  ),   0);
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify will not act on SUMM");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_SUMM, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__mid  ("critical_function"      , "15, 27, \"text\""                  , "s_equal"  ),   0);
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify another success (CONSOLE)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 'e')                 ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__mid  ("critical_function"      , "15, 27, \"text\""                  , "i_equal"  ),   1);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "      method : critical_function (15, 27, \"text\")");
   yUNIT_minstr   ("... check header"                   , yENV_upeek  (myUNIT.name, '>'), "      test   : i_equal    (rc =  101, test abbr = e)");
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_minprcs  ();
   return 0;
}

char
UNIT___disp_bot         (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_disp"    , "(DISP) verify formatting bot output");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond  ("verify quick success (CONSOLE)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "nice test string"                    , "nice test string"                    , "                "                    ),    1);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "      expect :  16[nice test string]");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '>'), "      actual :  16[nice test string]");
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify quick success (ETERM)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "nice test string"                    , "nice test string"                    , "                "                    ),    1);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "      expect :  16тnice test stringТ");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '>'), "      actual :  16тnice test stringТ");
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify will not act on STEP");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_STEP, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "nice test string"                    , "nice test string"                    , "                "                    ),    0);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    0);
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify will not act on COND");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_COND, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "nice test string"                    , "nice test string"                    , "                "                    ),    0);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    0);
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify will not act on SCRP");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_SCRP, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "nice test string"                    , "nice test string"                    , "                "                    ),    0);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    0);
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify will not act on SUMM");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_SUMM, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC, 0)                   ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "nice test string"                    , "nice test string"                    , "                "                    ),    0);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    0);
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify failure (CONSOLE)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FAIL,   -1)                ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "42"                                  , "forty-two"                           , "                "                    ),    1);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "      expect :   2[42]");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '>'), "      actual :   9[forty-two]");
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify modd failure at YUNIT_FULL");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FAIL,   -1)                ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "forti-lwo"                           , "forty-two plus"                      , "    x x  >>>>>"                      ),    1);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "      expect :   9[forti-lwo]");       
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '>'), "      actual :  14[forty-two plus]");
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify modd failure at YUNIT_MAXX");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_MAXX, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FAIL,   -1)                ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "forti-lwo"                           , "forty-two plus"                      , "    x x  >>>>>"                      ),    1);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    3);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "      expect :   9[forti-lwo]");       
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '>'), "      actual :  14[forty-two plus]");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '>'), "      ISSUE (2/5) [    x x  >>>>>]");
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify modd failure at YUNIT_MAXX (ETERM)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_MAXX, YUNIT_ETERM  , 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FAIL,   -1)                ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "forti-lwo"                           , "forty-two plus"                      , "    x x  >>>>>"                      ),    1);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    3);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "      expect :   9тforti-lwoТ");       
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '>'), "      actual :  14тforty-two plusТ");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '>'), "      ISSUE (2/5) тииии░и░ии>>>>>Т");
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify success at YUNIT_MAXX with match");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_MAXX, YUNIT_CONSOLE, 1),    0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FAIL,   -1)                ,    0);
   yUNIT_minval   ("call mid lines"                     , yunit_disp__bot  ('s', "s_equal"  , "forty-two"                           , "forty-two"                           , "         "                           ),    1);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '['), "      expect :   9[forty-two]");       
   yUNIT_minstr   ("... check empty"                    , yENV_upeek  (myUNIT.name, '>'), "      actual :   9[forty-two]");
   yUNIT_minstr   ("... check end"                      , yENV_upeek  (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_minprcs  ();
   return 0;
}

char
UNIT___disp_full        (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_disp"    , "(DISP) verify formatting full output");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond  ("verify quick success (CONSOLE)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC,    0)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_full ('i',  954,  25, "run function"   , "yUNIT_void"     , "0, 15, \"test\""                   , "  2т42Т"              , "i_equal"  , "  2т42Т"              , ""                     ), 1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  ay) PASS   : run function   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    6);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check method/args"              , yENV_upeek (myUNIT.name, '>'), "      method : yUNIT_void (0, 15, \"test\")");
   yUNIT_minstr   ("... check test/result"              , yENV_upeek (myUNIT.name, '>'), "      test   : i_equal    (rc =    0, test abbr = -)");
   yUNIT_minstr   ("... check expected"                 , yENV_upeek (myUNIT.name, '>'), "      expect :   2т42Т");
   yUNIT_minstr   ("... check actual"                   , yENV_upeek (myUNIT.name, '>'), "      actual :   2т42Т");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify same success (ETERM)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC,    0)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_full ('i',  954,  25, "run function"   , "yUNIT_void"     , "0, 15, \"test\""                   , "  2т42Т"              , "i_equal"  , "  2т42Т"              , ""                     ), 1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_GRN "ay) " BACK_GRN "PASS  " BACK_OFF " : run function ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    6);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check method/args"              , yENV_upeek (myUNIT.name, '>'), "      method : yUNIT_void (0, 15, \"test\")");
   yUNIT_minstr   ("... check test/result"              , yENV_upeek (myUNIT.name, '>'), "      test   : i_equal    (rc =    0, test abbr = -)");
   yUNIT_minstr   ("... check expected"                 , yENV_upeek (myUNIT.name, '>'), "      expect :   2т42Т");
   yUNIT_minstr   ("... check actual"                   , yENV_upeek (myUNIT.name, '>'), "      actual :   2т42Т");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify at STEP level");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_STEP, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC,    0)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_full ('i',  954,  25, "run function"   , "yUNIT_void"     , "0, 15, \"test\""                   , "  2т42Т"              , "i_equal"  , "  2т42Т"              , ""                     ), 1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_GRN "ay) " BACK_GRN "PASS  " BACK_OFF " : run function ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify at COND level");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_COND, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC,    0)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_full ('i',  954,  25, "run function"   , "yUNIT_void"     , "0, 15, \"test\""                   , "  2т42Т"              , "i_equal"  , "  2т42Т"              , ""                     ), 0);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    0);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify at SCRP level");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_SCRP, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC,    0)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_full ('i',  954,  25, "run function"   , "yUNIT_void"     , "0, 15, \"test\""                   , "  2т42Т"              , "i_equal"  , "  2т42Т"              , ""                     ), 0);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    0);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify at SUMM level");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_SUMM, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC,    0)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_full ('i',  954,  25, "run function"   , "yUNIT_void"     , "0, 15, \"test\""                   , "  2т42Т"              , "i_equal"  , "  2т42Т"              , ""                     ), 0);
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    0);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify modify on non-string (YUNIT_MAXX)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_MAXX, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FAIL,  -10)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_full ('i',  954,  25, "run function"   , "yUNIT_void"     , "0, 15, \"test\""                   , "  4тиииии1234Т"       , "i_equal"  , "  9т223456789Т"       , ""                     ), 1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_RED "ay) " BACK_RED "FAIL  " BACK_OFF " : run function ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    7);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check method/args"              , yENV_upeek (myUNIT.name, '>'), "      method : yUNIT_void (0, 15, \"test\")");
   yUNIT_minstr   ("... check test/result"              , yENV_upeek (myUNIT.name, '>'), "      test   : i_equal    (rc =  -10, test abbr = -)");
   yUNIT_minstr   ("... check expected"                 , yENV_upeek (myUNIT.name, '>'), "      expect :   4тиииии1234Т");
   yUNIT_minstr   ("... check actual"                   , yENV_upeek (myUNIT.name, '>'), "      actual :   9т223456789Т");
   yUNIT_minstr   ("... check actual"                   , yENV_upeek (myUNIT.name, '>'), "      ISSUE  : ииии░░░░░░░░░и");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___disp_single      (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_disp"    , "(DISP) verify single-line (spec) output");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond  ("verify quick success (CONSOLE)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC,    0)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_single (TYPE_MODE,  954,  25, "change to forced fail"   ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  ay) MODE   : change to forced fail   .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify quick success (ETERM)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC,    0)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_single (TYPE_MODE,  954,  25, "change to forced fail"   ),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_CYN "ay) " BACK_GRN "MODE  " BACK_OFF " : change to forced fail ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    2);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___disp_double      (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_disp"    , "(DISP) verify double-line (spec) output");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond  ("verify quick success (CONSOLE)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC,    0)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_double (TYPE_SYSTEM,  954,  25, "run a quick command"   , "system", "rm -fv \"test.tmp\"  > /dev/null  2>&1"),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  ay) PASS   : run a quick command  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    3);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), "      system :  36[rm -fv \"test.tmp\"  > /dev/null  2>&1]");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify quick success (ETERM)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_SUCC,    0)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_double (TYPE_SYSTEM,  954,  25, "run a quick command"   , "system", "rm -fv \"test.tmp\"  > /dev/null  2>&1"),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_CYN "ay) " BACK_GRN "PASS  " BACK_OFF " : run a quick command и ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    3);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), "      system :  36тrm -fv \"test.tmp\"  > /dev/null  2>&1Т");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify failure (ETERM)");
   yUNIT_minval   ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval   ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval   ("set the result"                     , yunit_force_resu (YUNIT_FAIL,   -1)                ,    0);
   yUNIT_minval   ("call recd driver"                   , yunit_disp_double (TYPE_SYSTEM,  954,  25, "run a quick command"   , "system", "rm -fv \"test.tmp\"  > /dev/null  2>&1"),    1);
   yUNIT_minstr   ("... global print"                   , s_print                 , "  " BACK_CYN "ay) " BACK_RED "FAIL  " BACK_OFF " : run a quick command и ии ии ии ии ии ии ии ии ии ии ии ии ии ии[00954]");
   yUNIT_minval   ("... check line count"               , yENV_ulines (myUNIT.name    ),    3);
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr   ("... check top line"                 , yENV_upeek (myUNIT.name, '>'), "      system :  36тrm -fv \"test.tmp\"  > /dev/null  2>&1Т");
   yUNIT_minstr   ("... check empty"                    , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval   ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc  ();

   yUNIT_minprcs ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =    0;
   /*---(arguments)----------------------*/
   printf ("## %s\n", P_ONELINE);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(scripts)------------------------*/
   UNIT___disp_top           (++n, x_list, x_unit);
   UNIT___disp_mid           (++n, x_list, x_unit);
   UNIT___disp_bot           (++n, x_list, x_unit);
   UNIT___disp_full          (++n, x_list, x_unit);
   UNIT___disp_single        (++n, x_list, x_unit);
   UNIT___disp_double        (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}
