#include    "master.munit"


char
UNIT___cond_type        (char a_scrp, char a_list, char a_unit)
{
   char        x_label     [LEN_TERSE] = "";
   char        x_note      [LEN_SHORT] = "";

   yUNIT_minscrpy ("yUNIT", "yUNIT_cond"    , "(COND) verify assigning COND type");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond  ("verify a normal condition (COND)");
   yUNIT_minval   ("call COND verb handler"             , yunit_cond_type  ('-', '-', '-', x_label, x_note), TYPE_COND);
   yUNIT_minstr   ("... check label"                    , x_label          , "COND");
   yUNIT_minstr   ("... check note"                     , x_note           , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a condition to be repeated later (CCND)");
   yUNIT_minval   ("call COND verb handler"             , yunit_cond_type  ('-', '3', '-', x_label, x_note), TYPE_CCND);
   yUNIT_minstr   ("... check label"                    , x_label          , "CCND");
   yUNIT_minstr   ("... check note"                     , x_note           , "(3)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a condition being repeated (DOND)");
   yUNIT_minval   ("call COND verb handler"             , yunit_cond_type  ('y', '3', '-', x_label, x_note), TYPE_DOND);
   yUNIT_minstr   ("... check label"                    , x_label          , "DOND");
   yUNIT_minstr   ("... check note"                     , x_note           , "(3)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a local shared condition (SOND)");
   yUNIT_minval   ("call COND verb handler"             , yunit_cond_type  ('-', '-', 'b', x_label, x_note), TYPE_SOND);
   yUNIT_minstr   ("... check label"                    , x_label          , "SOND");
   yUNIT_minstr   ("... check note"                     , x_note           , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a local shared condition to be repeated (CCND)");
   yUNIT_minval   ("call COND verb handler"             , yunit_cond_type  ('-', '3', 'b', x_label, x_note), TYPE_CCND);
   yUNIT_minstr   ("... check label"                    , x_label          , "CCND");
   yUNIT_minstr   ("... check note"                     , x_note           , "(3)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a local shared condition being repeated (DOND)");
   yUNIT_minval   ("call COND verb handler"             , yunit_cond_type  ('y', '3', 'b', x_label, x_note), TYPE_DOND);
   yUNIT_minstr   ("... check label"                    , x_label          , "DOND");
   yUNIT_minstr   ("... check note"                     , x_note           , "(3)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a global shared condition (GOND)");
   yUNIT_minval   ("call COND verb handler"             , yunit_cond_type  ('-', '-', 'B', x_label, x_note), TYPE_GOND);
   yUNIT_minstr   ("... check label"                    , x_label          , "GOND");
   yUNIT_minstr   ("... check note"                     , x_note           , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a config shared condition (GOND)");
   yUNIT_minval   ("call COND verb handler"             , yunit_cond_type  ('-', '-', 'ò', x_label, x_note), TYPE_GOND);
   yUNIT_minstr   ("... check label"                    , x_label          , "GOND");
   yUNIT_minstr   ("... check note"                     , x_note           , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a global shared condition to be repeated (CCND)");
   yUNIT_minval   ("call COND verb handler"             , yunit_cond_type  ('-', '3', 'B', x_label, x_note), TYPE_CCND);
   yUNIT_minstr   ("... check label"                    , x_label          , "CCND");
   yUNIT_minstr   ("... check note"                     , x_note           , "(3)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a global shared condition being repeated (DOND)");
   yUNIT_minval   ("call COND verb handler"             , yunit_cond_type  ('y', '3', 'B', x_label, x_note), TYPE_DOND);
   yUNIT_minstr   ("... check label"                    , x_label          , "DOND");
   yUNIT_minstr   ("... check note"                     , x_note           , "(3)");
   yUNIT_mindnoc  ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___cond_cond        (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_cond"    , "(COND) verify condition openning (yUNIT_cond)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify quick success, full unit-level (CONSOLE)");
   yUNIT_minval ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call COND verb handler"             , yUNIT_cond  (   954,  321, '-', '-', '-', "check the initial values"                         ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  COND [321] check the initial values -- -- -- -- -- -- -- -- -- -- -- -- -- -[00954]");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), "  COND [321] check the initial values -- -- -- -- -- -- -- -- -- -- -- -- -- -[00954]");
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify quick success, full unit-level (ETERM)");
   yUNIT_minval ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call COND verb handler"             , yUNIT_cond  (     5,    1, '-', '-', '-', "check the initial values"                         ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  COND [001] check the initial values -- -- -- -- -- -- -- -- -- -- -- -- -- -[00005]");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), "  COND [001] check the initial values -- -- -- -- -- -- -- -- -- -- -- -- -- -[00005]");
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify condition-level");
   yUNIT_minval ("create a unit on cond output"       , yUNIT_unit  (s_nconv, YUNIT_COND, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call COND verb handler"             , yUNIT_cond  (   123,   10, '-', '-', '-', "check the initial values"                         ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  COND [010] check the initial values -- -- -- -- -- -- -- -- -- -- -- -- -- -[00123]");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), "  COND [010] check the initial values -- -- -- -- -- -- -- -- -- -- -- -- -- -[00123]");
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify script-level");
   yUNIT_minval ("create a unit on scrp output"       , yUNIT_unit  (s_nconv, YUNIT_SCRP, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call COND verb handler"             , yUNIT_cond  (   954,  321, '-', '-', '-', "check the initial values"                         ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    0);
   yUNIT_minstr ("... global print"                   , s_print                 , "  COND [321] check the initial values -- -- -- -- -- -- -- -- -- -- -- -- -- -[00954]");
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '['), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify defenses");
   yUNIT_minval ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call COND verb handler"             , yUNIT_cond  (    -1,   -1, '-', '-', '-', NULL                                               ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  COND [---] (null) -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -[-----]");
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call COND verb handler"             , yUNIT_cond  (100000, 1000, '-', '-', '-', "excellent stuffs"                                 ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  COND [***] excellent stuffs - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -[*****]");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___cond_dnoc        (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_cond"    , "(COND) verify condition closing (yUNIT_dnoc)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify full unit-level DNOC");
   yUNIT_minval ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 3, 2, 1);
   yUNIT_minval ("call DNOC verb handler"             , yUNIT_dnoc  (1)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "      DNOC  -------------- test=11    [ pass=5     fail=3     badd=2     void=1     ]");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify condition-level DNOC");
   yUNIT_minval ("create a unit on cond output"       , yUNIT_unit  (s_nconv, YUNIT_COND, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 3, 2, 1);
   yUNIT_minval ("call DNOC verb handler"             , yUNIT_dnoc  (1)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    1);
   yUNIT_minstr ("... global print"                   , s_print                 , "      DNOC  -------------- test=11    [ pass=5     fail=3     badd=2     void=1     ]");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '['), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify script-level DNOC");
   yUNIT_minval ("create a unit on scrp output"       , yUNIT_unit  (s_nconv, YUNIT_SCRP, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 3, 2, 1);
   yUNIT_minval ("call DNOC verb handler"             , yUNIT_dnoc  (1)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    0);
   yUNIT_minstr ("... global print"                   , s_print                 , "      DNOC  -------------- test=11    [ pass=5     fail=3     badd=2     void=1     ]");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify full unit-level (ETERM) fail");
   yUNIT_minval ("create a unit on full/eterm"        , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 3, 2, 1);
   yUNIT_minval ("call DNOC verb handler"             , yUNIT_dnoc  (1)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "      " BACK_RED "DNOC  -------------- test=11    [ pass=5     fail=3     badd=2     void=1     ]" BACK_OFF);
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify full unit-level (ETERM) warning");
   yUNIT_minval ("create a unit on full/eterm"        , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 0, 2, 1);
   yUNIT_minval ("call DNOC verb handler"             , yUNIT_dnoc  (1)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "      " BACK_YEL "DNOC  -------------- test=11    [ pass=5     fail=0     badd=2     void=1     ]" BACK_OFF);
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify full unit-level (ETERM) pass");
   yUNIT_minval ("create a unit on full/eterm"        , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 0, 0, 1);
   yUNIT_minval ("call DNOC verb handler"             , yUNIT_dnoc  (1)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "      " BACK_GRN "DNOC  -------------- test=11    [ pass=5     fail=0     badd=0     void=1     ]" BACK_OFF);
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___cond_dnod        (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_cond"    , "(COND) verify condition listing (yUNIT_dnod)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify full unit-level DNOD");
   yUNIT_minval ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 3, 2, 1);
   yUNIT_minval ("call DNOD verb handler"             , yUNIT_dnoc  (0)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "      DNOD  -------------- test=11    [ ------------------------------------------- ]");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (0), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify condition-level DNOD");
   yUNIT_minval ("create a unit on cond output"       , yUNIT_unit  (s_nconv, YUNIT_COND, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 3, 2, 1);
   yUNIT_minval ("call DNOD verb handler"             , yUNIT_dnoc  (0)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    1);
   yUNIT_minstr ("... global print"                   , s_print                 , "      DNOD  -------------- test=11    [ ------------------------------------------- ]");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '['), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (0), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify script-level DNOD");
   yUNIT_minval ("create a unit on scrp output"       , yUNIT_unit  (s_nconv, YUNIT_SCRP, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 3, 2, 1);
   yUNIT_minval ("call DNOD verb handler"             , yUNIT_dnoc  (0)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    0);
   yUNIT_minstr ("... global print"                   , s_print                 , "      DNOD  -------------- test=11    [ ------------------------------------------- ]");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (0), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify full unit-level (ETERM) fail");
   yUNIT_minval ("create a unit on full/eterm"        , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 3, 2, 1);
   yUNIT_minval ("call DNOD verb handler"             , yUNIT_dnoc  (0)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "      DNOD  -------------- test=11    [ ------------------------------------------- ]");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (0), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify full unit-level (ETERM) warning");
   yUNIT_minval ("create a unit on full/eterm"        , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 0, 2, 1);
   yUNIT_minval ("call DNOD verb handler"             , yUNIT_dnoc  (0)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "      DNOD  -------------- test=11    [ ------------------------------------------- ]");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (0), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify full unit-level (ETERM) pass");
   yUNIT_minval ("create a unit on full/eterm"        , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yunit_force_cond (11, 5, 0, 0, 1);
   yUNIT_minval ("call DNOD verb handler"             , yUNIT_dnoc  (0)                                  , 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "      DNOD  -------------- test=11    [ ------------------------------------------- ]");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (0), 0);
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___cond_group       (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_cond"    , "(COND) verify condition grouping (yUNIT_group)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify full unit-level GROUP");
   yUNIT_minval ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call GROUP verb handler"            , yUNIT_group ("nice group"                      ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  GROUP ===---------------------------   nice group   ----------------------------===");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify condition-level GROUP");
   yUNIT_minval ("create a unit on cond output"       , yUNIT_unit  (s_nconv, YUNIT_COND, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call GROUP verb handler"            , yUNIT_group ("nice group"                      ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  GROUP ===---------------------------   nice group   ----------------------------===");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify script-level GROUP");
   yUNIT_minval ("create a unit on scrp output"       , yUNIT_unit  (s_nconv, YUNIT_SCRP, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call GROUP verb handler"            , yUNIT_group ("nice group"                      ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    0);
   yUNIT_minstr ("... global print"                   , s_print                 , "  GROUP ===---------------------------   nice group   ----------------------------===");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify full unit-level GROUP (ETERM)");
   yUNIT_mincond ("yUNIT_group");
   yUNIT_minval ("create a unit on full/eterm"        , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_ETERM  , 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call GROUP verb handler"            , yUNIT_group ("nice group"                      ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  GROUP ===---------------------------   nice group   ----------------------------===");
   yUNIT_minstr ("... check empty"                    , yENV_upeek (myUNIT.name, '['), "");
   yUNIT_minstr ("... check footer"                   , yENV_upeek (myUNIT.name, '>'), s_print);
   yUNIT_minstr ("... check end"                      , yENV_upeek (myUNIT.name, '>'), "(n/a)");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verif defense on NULL");
   yUNIT_minval ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call GROUP verb handler"            , yUNIT_group (NULL                              ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  GROUP ===-----------------------------   (null)   ------------------------------===");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verif defense on empty");
   yUNIT_minval ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call GROUP verb handler"            , yUNIT_group (""                                ), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  GROUP ===-----------------------------   (empty)   -----------------------------===");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verif defense on max length");
   yUNIT_minval ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call GROUP verb handler"            , yUNIT_group ("123456789-123456789-123456789-123456789-123456789-123456789"), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  GROUP ===---   123456789-123456789-123456789-123456789-123456789-123456789   ---===");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verif defense on too long");
   yUNIT_minval ("create a unit on full output"       , yUNIT_unit  (s_nconv, YUNIT_FULL, YUNIT_CONSOLE, 1)  , 0);
   yUNIT_minval ("cycle reporting file"               , yunit_cycle ()             , 0);
   yUNIT_minval ("call GROUP verb handler"            , yUNIT_group ("123456789-123456789-123456789-123456789-123456789-123456789-123456789-"), 0);
   yUNIT_minval ("... check line count"               , yENV_ulines (myUNIT.name   ),    2);
   yUNIT_minstr ("... global print"                   , s_print                 , "  GROUP ===---   123456789-123456789-123456789-123456789-123456789-1234567>>   ---===");
   yUNIT_minval ("close out a unit test"              , yUNIT_tinu  (1), 0);
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =    0;
   /*---(arguments)----------------------*/
   printf ("## %s\n", P_ONELINE);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(startup)------------------------*/
   yUNIT_minunit ("yUNIT_cond");
   /*---(scripts)------------------------*/
   UNIT___cond_type          (++n, x_list, x_unit);
   UNIT___cond_cond          (++n, x_list, x_unit);
   UNIT___cond_dnoc          (++n, x_list, x_unit);
   UNIT___cond_dnod          (++n, x_list, x_unit);
   UNIT___cond_group         (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}


