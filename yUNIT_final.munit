#include    "master.munit"



char
UNIT___final_seqn       (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_final"   , "(FINAL) verify step sequencing (yunit_final_step)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify step sequencing");
   yUNIT_minstr  ("generate sequence string"           , yunit_final_step ( -1)        , "--" );
   yUNIT_minstr  ("generate sequence string"           , yunit_final_step (  0)        , "--" );
   yUNIT_minstr  ("generate sequence string"           , yunit_final_step (  1)        , "aa" );
   yUNIT_minstr  ("generate sequence string"           , yunit_final_step (  5)        , "ae" );
   yUNIT_minstr  ("generate sequence string"           , yunit_final_step ( 26)        , "az" );
   yUNIT_minstr  ("generate sequence string"           , yunit_final_step ( 27)        , "ba" );
   yUNIT_minstr  ("generate sequence string"           , yunit_final_step (301)        , "lo" );
   yUNIT_minstr  ("generate sequence string"           , yunit_final_step (676)        , "zz" );
   yUNIT_minstr  ("generate sequence string"           , yunit_final_step (677)        , "**" );
   yUNIT_minstr  ("generate sequence string"           , yunit_final_step (900)        , "**" );
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___final_desc       (char a_scrp, char a_list, char a_unit)
{
   char        x_line      [LEN_TERSE] = "";
   char        x_seqn      [LEN_TERSE] = "";
   char        x_desc      [LEN_LONG]  = "";
   char        x_len                   =  0;
   char        x_pre                   =  0;
   char        x_suf                   =  0;

   yUNIT_minscrpy ("yUNIT", "yUNIT_final"   , "(FINAL) verify description formatting (yunit_final_prep)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify basic fill");
   yUNIT_minval  ("call equal"                         , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script ====================================================");
   yUNIT_minval  ("call dash"                          , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 1, YSTR_DASH , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script ----------------------------------------------------");
   yUNIT_minval  ("call empty"                         , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 1, YSTR_EMPTY, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script                                                     ");
   yUNIT_minval  ("call condition line"                , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 1, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -");
   yUNIT_minval  ("call condition line"                , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 1, YSTR_ESTEP, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии ии и");
   yUNIT_minval  ("call condition line"                , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 1, YSTR_CSTEP, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify left alignment plus gap");
   yUNIT_minval  ("first left, gap 0"                  , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 0, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script=====================================================");
   yUNIT_minval  ("first left, gap 0"                  , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 0, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -");
   yUNIT_minval  ("first left, gap 1"                  , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 1, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -");
   yUNIT_minval  ("first left, gap 2"                  , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 2, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script  - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -");
   yUNIT_minval  ("first left, gap 5"                  , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 5, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script     - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify right alignment, plus gap");
   yUNIT_minval  ("then right, gap 0"                  , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_RIG, 0, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "=====================================================first script");
   yUNIT_minval  ("then right, gap 0"                  , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_RIG, 0, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -first script");
   yUNIT_minval  ("then right, gap 1"                  , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_RIG, 1, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  first script");
   yUNIT_minval  ("then right, gap 2"                  , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_RIG, 2, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  first script");
   yUNIT_minval  ("then right, gap 5"                  , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_RIG, 5, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     first script");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify center alignment, plus gap");
   yUNIT_minval  ("finally center, gap 0"              , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_CEN, 0, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "==========================first script===========================");
   yUNIT_minval  ("finally center, gap 0"              , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_CEN, 0, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " -- -- -- -- -- -- -- -- -first script- -- -- -- -- -- -- -- -- -");
   yUNIT_minval  ("finally center, gap 1"              , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_CEN, 1, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " -- -- -- -- -- -- -- --  first script  -- -- -- -- -- -- -- -- -");
   yUNIT_minval  ("finally center, gap 2"              , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_CEN, 2, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " -- -- -- -- -- -- -- --  first script  -- -- -- -- -- -- -- -- -");
   yUNIT_minval  ("finally center, gap 5"              , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_CEN, 5, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " -- -- -- -- -- -- --     first script     -- -- -- -- -- -- -- -");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify adjusting max");
   yUNIT_minval  ("call equal"                         , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 60, YSTR_TEXT_LEF, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script ===============================================");
   yUNIT_minval  ("call condition line"                , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 60, YSTR_TEXT_LEF, 1, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --");
   yUNIT_minval  ("call condition line"                , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 50, YSTR_TEXT_LEF, 1, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script -- -- -- -- -- -- -- -- -- -- -- -- -");
   yUNIT_minval  ("call condition line"                , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 30, YSTR_TEXT_LEF, 1, YSTR_COND , NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script -- -- -- -- -- --");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify text length");
   yUNIT_minval  ("call short"                         , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script"             , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script ====================================================");
   yUNIT_minval  ("call moderate"                      , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script with longer text"                 , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script with longer text ===================================");
   yUNIT_minval  ("call longer"                        , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script with longer text to start to test", 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script with longer text to start to test ==================");
   yUNIT_minval  ("call just fits"                     , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script with longer text to start to test boundaries on txt"              , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script with longer text to start to test boundaries on txt ");
   yUNIT_minval  ("call just fits"                     , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script with longer text to start to test boundaries on txt"              , 65, YSTR_TEXT_RIG, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " first script with longer text to start to test boundaries on txt");
   yUNIT_minval  ("call just fits"                     , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script with longer text to start to test boundaries on txt"              , 65, YSTR_TEXT_CEN, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " first script with longer text to start to test boundaries on >> ");
   yUNIT_minval  ("call just over"                     , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script with longer text to start to test boundaries on text"             , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script with longer text to start to test boundaries on t>> ");
   yUNIT_minval  ("call just over"                     , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script with longer text to start to test boundaries on text"             , 65, YSTR_TEXT_RIG, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " first script with longer text to start to test boundaries on t>>");
   yUNIT_minval  ("call just over"                     , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script with longer text to start to test boundaries on text"             , 65, YSTR_TEXT_CEN, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , " first script with longer text to start to test boundaries on >> ");
   yUNIT_minval  ("call way over"                      , yunit_final_prep (TYPE_SCRP  , '-',     0,  0, "first script with longer text to start to test boundaries on text over-length" , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, NULL  , NULL  , x_desc),    0);
   yUNIT_minstr  ("... check description"              , x_desc     , "first script with longer text to start to test boundaries on t>> ");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___final_prep       (char a_scrp, char a_list, char a_unit)
{
   char        x_line      [LEN_TERSE] = "";
   char        x_seqn      [LEN_TERSE] = "";
   char        x_desc      [LEN_LONG]  = "";
   char        x_len                   =  0;
   char        x_pre                   =  0;
   char        x_suf                   =  0;

   yUNIT_minscrpy ("yUNIT", "yUNIT_final"   , "(FINAL) verify final prep on output (yunit_final_prep)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify SCRP level");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_SCRP  , '-', 12345, 21, "first script"             , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),    0);
   yUNIT_minstr  ("... check line"                     , x_line     , "[12345]");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "[21]");
   yUNIT_minstr  ("... check description"              , x_desc     , "first script ====================================================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify SHARED level");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_SHARED, '-',     0,  0, "great data share"         , 70, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , "[-----]");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "[--]");
   yUNIT_minstr  ("... check description"              , x_desc     , "great data share =====================================================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify COND level");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_COND  , '-',   123,  2, "second condition"         , 50, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , "[00123]");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "[002]");
   yUNIT_minstr  ("... check description"              , x_desc     , "second condition =================================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify COND inside global share");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_COND  , 'J',   123,  2, "second condition"         , 50, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , ">00123<");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "[002]");
   yUNIT_minstr  ("... check description"              , x_desc     , "second condition =================================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify STEP level");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_STEP  , '-',    15,  5, "fifth execution step"     , 40, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , "[00015]");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "ae");
   yUNIT_minstr  ("... check description"              , x_desc     , "fifth execution step ===================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify STEP level (NULL desc)");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_STEP  , '-',  5115, 27, NULL                       , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , "[05115]");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "ba");
   yUNIT_minstr  ("... check description"              , x_desc     , "(null) ==========================================================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify STEP level (empty desc)");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_STEP  , '-',    15,  5, ""                         , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , "[00015]");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "ae");
   yUNIT_minstr  ("... check description"              , x_desc     , "(empty) =========================================================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify STEP level (local share)");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_STEP  , 'a',    15,  5, "fifth execution step"     , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , "[00015]");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "ae");
   yUNIT_minstr  ("... check description"              , x_desc     , "fifth execution step ============================================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify STEP level (global share)");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_STEP  , 'A',    15,  5, "fifth execution step"     , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , ">00015<");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "ae");
   yUNIT_minstr  ("... check description"              , x_desc     , "fifth execution step ============================================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify STEP level (config share)");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_STEP, 'Ы',   456, 64, "fifth execution step"       , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , ">00456<");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "cl");
   yUNIT_minstr  ("... check description"              , x_desc     , "fifth execution step ============================================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify STEP level (with prefix)");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_STEP, '-',    15,  5, "... fifth execution step"   , 65, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , "[00015]");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "ae");
   yUNIT_minstr  ("... check description"              , x_desc     , "fifth execution step ============================================");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify STEP level (too long)");
   yUNIT_minval  ("generate sequence string"           , yunit_final_prep (TYPE_STEP, '-',    15,  5, "fifth execution step after a more important initial step to prepare the data" , 40, YSTR_TEXT_LEF, 1, YSTR_EQUAL, x_line, x_seqn, x_desc),   0);
   yUNIT_minstr  ("... check line"                     , x_line     , "[00015]");
   yUNIT_minstr  ("... check sequence"                 , x_seqn     , "ae");
   yUNIT_minstr  ("... check description"              , x_desc     , "fifth execution step after a more imp>> ");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___final_color_fixed  (char a_scrp, char a_list, char a_unit)
{
   char        x_on        [LEN_TERSE] = "";
   char        x_on2       [LEN_TERSE] = "";
   char        x_off       [LEN_TERSE] = "";
   char        x_note      [LEN_TERSE] = "";
   char        x_test      [LEN_DESC]  = "";

   yUNIT_minscrpy ("yUNIT", "yUNIT_final"   , "(FINAL) verify coloration on fixed colors");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify always mono coloration");
   yUNIT_minval  ("call SCRP"                          , yunit_final_color ('-', TYPE_SCRP  , &x_on , &x_on2, &x_off, x_note, x_test),    0);
   yUNIT_minstr  ("... check test"                     , x_test                  , "  one    two  ");
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_minval  ("call SECT"                          , yunit_final_color ('-', TYPE_SECT  , &x_on , &x_on2, &x_off, x_note, x_test),    0);
   yUNIT_minstr  ("... check test"                     , x_test                  , "  one    two  ");
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_minval  ("call GROUP"                         , yunit_final_color ('-', TYPE_GROUP , &x_on , &x_on2, &x_off, x_note, x_test),    0);
   yUNIT_minstr  ("... check test"                     , x_test                  , "  one    two  ");
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_minval  ("call COND"                          , yunit_final_color ('-', TYPE_COND  , &x_on , &x_on2, &x_off, x_note, x_test),    0);
   yUNIT_minstr  ("... check test"                     , x_test                  , "  one    two  ");
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify local shared coloration");
   yUNIT_minval  ("call SHARED"                        , yunit_final_color ('-', TYPE_SHARED, &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_MAG "  one    two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_minval  ("call DERAHS"                        , yunit_final_color ('-', TYPE_DERAHS, &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_MAG "  one    two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_minval  ("call SOND"                          , yunit_final_color ('-', TYPE_SOND  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_MAG "  one    two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify global shared coloration");
   yUNIT_minval  ("call GLOBAL"                        , yunit_final_color ('-', TYPE_GLOBAL, &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_BLU "  one    two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_minval  ("call LABOLG"                        , yunit_final_color ('-', TYPE_LABOLG, &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_BLU "  one    two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_minval  ("call CONFIG"                        , yunit_final_color ('-', TYPE_CONFIG, &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_BLU "  one    two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_minval  ("call GIFNOC"                        , yunit_final_color ('-', TYPE_GIFNOC, &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_BLU "  one    two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_minval  ("call GOND"                          , yunit_final_color ('-', TYPE_GOND  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_BLU "  one    two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify void line coloration");
   yUNIT_minval  ("call LOCAL"                         , yunit_final_color ('-', TYPE_LOCAL , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_CYN "  one  " BACK_GRN "  two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "LOCAL");
   yUNIT_minval  ("call CODE"                          , yunit_final_color ('-', TYPE_CODE  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_CYN "  one  " BACK_GRN "  two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "CODE");
   yUNIT_minval  ("call LOAD"                          , yunit_final_color ('-', TYPE_LOAD  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_CYN "  one  " BACK_GRN "  two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "LOAD");
   yUNIT_minval  ("call MODE"                          , yunit_final_color ('-', TYPE_MODE  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_CYN "  one  " BACK_GRN "  two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "MODE");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___final_color_vary   (char a_scrp, char a_list, char a_unit)
{
   char        x_on        [LEN_TERSE] = "";
   char        x_on2       [LEN_TERSE] = "";
   char        x_off       [LEN_TERSE] = "";
   char        x_note      [LEN_TERSE] = "";
   char        x_test      [LEN_DESC]  = "";

   yUNIT_minscrpy ("yUNIT", "yUNIT_final"   , "(FINAL) verify coloration on fixed colors");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify success");
   yunit_force_resu (YUNIT_SUCC, 0);
   yUNIT_minval  ("call SCRP"                          , yunit_final_color ('-', TYPE_STEP  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_GRN "  one  " BACK_GRN "  two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "PASS");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify failure");
   yunit_force_resu (YUNIT_FAIL, -1);
   yUNIT_minval  ("call SCRP"                          , yunit_final_color ('-', TYPE_STEP  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_RED "  one  " BACK_RED "  two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "FAIL");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify warning");
   yunit_force_resu (YUNIT_WARN, 1);
   yUNIT_minval  ("call SCRP"                          , yunit_final_color ('-', TYPE_STEP  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_YEL "  one  " BACK_YEL "  two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "WARN");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify success in forced fail mode");
   yunit_force_resu (YUNIT_FFAIL, 0);
   yUNIT_minval  ("call SCRP"                          , yunit_final_color ('-', TYPE_STEP  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_GRN "  one  " BACK_RED "  two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "!FAIL");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify failure in forced fail mode");
   yunit_force_resu (YUNIT_FSUCC, -1);
   yUNIT_minval  ("call SCRP"                          , yunit_final_color ('-', TYPE_STEP  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_RED "  one  " BACK_GRN "  two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "!PASS");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify void");
   yunit_force_resu (YUNIT_VOID, 0);
   yUNIT_minval  ("call SCRP"                          , yunit_final_color ('-', TYPE_STEP  , &x_on , &x_on2, &x_off, x_note, x_test),    1);
   yUNIT_minstr  ("... check test"                     , x_test                  , BACK_CYN "  one  " BACK_CYN "  two  " BACK_OFF);
   yUNIT_minstr  ("... check note"                     , x_note                  , "----");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
UNIT___final_footer     (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yUNIT", "yUNIT_final"   , "(FINAL) verify coloration on fixed colors");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify success");
   yunit_force_cond (11, 5, 0, 0, 0);
   yUNIT_minstr  ("... unit level"                     , yunit_final_footer  (TYPE_TINU)  , BACK_GRN    "TINU  scrp=1    cond=1     test=11    [ pass=5     fail=0     badd=0     void=0     ]" BACK_OFF);
   yUNIT_minstr  ("... script level"                   , yunit_final_footer  (TYPE_PRCS)  , "  " BACK_GRN "PRCS  ------- cond=1     test=11    [ pass=5     fail=0     badd=0     void=0     ]" BACK_OFF);
   yUNIT_minstr  ("... condition level"                , yunit_final_footer  (TYPE_DNOC)  , "      " BACK_GRN "DNOC  -------------- test=11    [ pass=5     fail=0     badd=0     void=0     ]" BACK_OFF);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify failure");
   yunit_force_cond (11, 5, 3, 0, 0);
   yUNIT_minstr  ("... unit level"                     , yunit_final_footer  (TYPE_TINU)  , BACK_RED    "TINU  scrp=1    cond=1     test=11    [ pass=5     fail=3     badd=0     void=0     ]" BACK_OFF);
   yUNIT_minstr  ("... script level"                   , yunit_final_footer  (TYPE_PRCS)  , "  " BACK_RED "PRCS  ------- cond=1     test=11    [ pass=5     fail=3     badd=0     void=0     ]" BACK_OFF);
   yUNIT_minstr  ("... condition level"                , yunit_final_footer  (TYPE_DNOC)  , "      " BACK_RED "DNOC  -------------- test=11    [ pass=5     fail=3     badd=0     void=0     ]" BACK_OFF);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify warning");
   yunit_force_cond (11, 5, 0, 2, 0);
   yUNIT_minstr  ("... unit level"                     , yunit_final_footer  (TYPE_TINU)  , BACK_YEL    "TINU  scrp=1    cond=1     test=11    [ pass=5     fail=0     badd=2     void=0     ]" BACK_OFF);
   yUNIT_minstr  ("... script level"                   , yunit_final_footer  (TYPE_PRCS)  , "  " BACK_YEL "PRCS  ------- cond=1     test=11    [ pass=5     fail=0     badd=2     void=0     ]" BACK_OFF);
   yUNIT_minstr  ("... condition level"                , yunit_final_footer  (TYPE_DNOC)  , "      " BACK_YEL "DNOC  -------------- test=11    [ pass=5     fail=0     badd=2     void=0     ]" BACK_OFF);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify success");
   yunit_force_cond ( 0, 0, 0, 0, 0);
   yunit_force_scrp ( 0, 0, 0, 0, 0, 0);
   yunit_force_unit ( 0, 0, 0, 0, 0, 0, 0);
   yUNIT_minstr  ("... unit level"                     , yunit_final_footer  (TYPE_TINU)  , BACK_BLK    "TINU  scrp=0    cond=0     test=0     [ pass=0     fail=0     badd=0     void=0     ]" BACK_OFF);
   yUNIT_minstr  ("... script level"                   , yunit_final_footer  (TYPE_PRCS)  , "  " BACK_BLK "PRCS  ------- cond=0     test=0     [ pass=0     fail=0     badd=0     void=0     ]" BACK_OFF);
   yUNIT_minstr  ("... condition level"                , yunit_final_footer  (TYPE_DNOC)  , "      " BACK_BLK "DNOC  -------------- test=0     [ pass=0     fail=0     badd=0     void=0     ]" BACK_OFF);
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =    0;
   /*---(arguments)----------------------*/
   printf ("## %s\n", P_ONELINE);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(startup)------------------------*/
   yUNIT_minunit ("yUNIT_final");
   /*---(scripts)------------------------*/
   UNIT___final_seqn         (++n, x_list, x_unit);
   UNIT___final_desc         (++n, x_list, x_unit);
   UNIT___final_prep         (++n, x_list, x_unit);
   UNIT___final_color_fixed  (++n, x_list, x_unit);
   UNIT___final_color_vary   (++n, x_list, x_unit);
   UNIT___final_footer       (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}


